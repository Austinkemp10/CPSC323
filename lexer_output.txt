Token			Lexeme
-------------------------------
Keyword			int
Identifier		x
Separator		,
Identifier		y
Separator		,
Identifier		z
Separator		;
Identifier		read
Separator		(
Identifier		x
Separator		)
Separator		;
Identifier		read
Separator		(
Identifier		y
Separator		)
Separator		;
Identifier		read
Separator		(
Identifier		z
Separator		)
Separator		;
Identifier		read
Separator		(
Identifier		w
Separator		)
Separator		;
Identifier		read
Separator		(
Identifier		v
Separator		)
Separator		;
Keyword			if
Separator		(
Identifier		x
Operator		>
Identifier		y
Operator		&
Identifier		x
Operator		>
Identifier		z
Separator		)
Identifier		write
Separator		(
Identifier		x
Separator		)
Separator		;
Keyword			else
Keyword			if
Separator		(
Identifier		y
Operator		>
Identifier		x
Operator		&
Identifier		y
Operator		>
Identifier		z
Separator		)
Identifier		write
Separator		(
Identifier		y
Separator		)
Separator		;
Keyword			else
Keyword			if
Separator		(
Identifier		z
Operator		=>
Identifier		x
Operator		&
Identifier		z
Operator		>
Identifier		y
Separator		)
Identifier		write
Separator		(
Identifier		z
Separator		)
Separator		;
Keyword			else
Identifier		write
Separator		(
Identifier		w
Separator		)
Separator		;
Identifier		fi
Separator		;
Keyword			while
Separator		(
Identifier		x
Operator		>
Identifier		y
Separator		)
Separator		{
Identifier		y
Operator		=
Identifier		y
Operator		+
Integer			1
Separator		;
Identifier		write
Separator		(
Identifier		y
Separator		)
Separator		;
Separator		}
Keyword			return
Integer			0
Separator		;
