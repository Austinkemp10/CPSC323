Token: Keyword --- Lexeme: function
Token: Keyword --- Lexeme: function
     <Opt Function Definitions> ::= <FunctionDefinitions>
     <Function Definitions> ::= <Function><Function Definitions Prime>
Token: Identifier --- Lexeme: convert$
Token: Separator --- Lexeme: [
     <Opt Parameter List> ::= <Parameter List>
     <Parameter List> ::= <Parameter> , <Parameter List Prime>
     <Parameter> ::= <IDS> := <Qualifier>
Token: Identifier --- Lexeme: fahr
     <IDs> ::= <Identifier>
     <IDsPrime> ::= Epsilon
Token: Separator --- Lexeme: :
Token: Keyword --- Lexeme: int
     <Qualifier> ::= int
     <Parameter List Prime> ::= Epsilon
Token: Separator --- Lexeme: ]
Token: Separator --- Lexeme: {
     <OptDeclarationList> ::= <Empty>
Token: Separator --- Lexeme: {
     <Empty> ::= Epsilon
Token: Separator --- Lexeme: {
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Keyword --- Lexeme: return
     <Statement> ::= <Return>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Integer --- Lexeme: 5
     <Primary> = <Integer>
Token: Operator --- Lexeme: *
     <Term Prime> = * <Factor><Term>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Separator --- Lexeme: (
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: fahr
     <Primary> = <Identifier>
Token: Operator --- Lexeme: -
     <Primary Prime> = Epsilon
     <Term Prime> = Epsilon
Token: Operator --- Lexeme: -
     <Expression Prime> = - <Expression>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Integer --- Lexeme: 32
     <Primary> = <Integer>
     <Term Prime> = Epsilon
     <Expression Prime> = EpsilonToken: Separator --- Lexeme: )
     <Primary> = (<Expression>)
Token: Operator --- Lexeme: /
     <Term Prime> = / <Factor><Term>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Integer --- Lexeme: 9
     <Primary> = <Integer>
     <Term Prime> = Epsilon
     <Expression Prime> = Epsilon     <Expression Prime> = Epsilon     <Expression Prime> = EpsilonToken: Separator --- Lexeme: ;
     <Return> ::= return <Expression>;
     <Statement List Prime> ::= Epsilon
Token: Separator --- Lexeme: }
     <Body> ::= {<Statement List>}
Token: Keyword --- Lexeme: function
     <Function Definitions Prime> ::= <Function Definitions>
     <Function Definitions> ::= <Function><Function Definitions Prime>
Token: Identifier --- Lexeme: maxTemp
Token: Separator --- Lexeme: [
     <Opt Parameter List> ::= <Parameter List>
     <Parameter List> ::= <Parameter> , <Parameter List Prime>
     <Parameter> ::= <IDS> := <Qualifier>
Token: Identifier --- Lexeme: fahr
     <IDs> ::= <Identifier>
     <IDsPrime> ::= Epsilon
Token: Separator --- Lexeme: :
Token: Keyword --- Lexeme: int
     <Qualifier> ::= int
     <Parameter List Prime> ::= Epsilon
Token: Separator --- Lexeme: ]
Token: Separator --- Lexeme: {
     <OptDeclarationList> ::= <Empty>
Token: Separator --- Lexeme: {
     <Empty> ::= Epsilon
Token: Separator --- Lexeme: {
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Identifier --- Lexeme: newTemp
     <Statement> ::= <Assign>
Token: Operator --- Lexeme: =
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Separator --- Lexeme: (
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: fahr
     <Primary> = <Identifier>
Token: Operator --- Lexeme: *
     <Primary Prime> = Epsilon
Token: Operator --- Lexeme: *
     <Term Prime> = * <Factor><Term>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Integer --- Lexeme: 54
     <Primary> = <Integer>
     <Term Prime> = Epsilon
     <Expression Prime> = Epsilon     <Expression Prime> = EpsilonToken: Separator --- Lexeme: )
     <Primary> = (<Expression>)
Token: Operator --- Lexeme: /
     <Term Prime> = / <Factor><Term>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Integer --- Lexeme: 100
     <Primary> = <Integer>
     <Term Prime> = Epsilon
     <Expression Prime> = Epsilon     <Expression Prime> = Epsilon[Line Number:11]=Syntax Error: Missing ';'.
