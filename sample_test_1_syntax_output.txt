Token: Unknown --- Lexeme: %%
     <OptDeclarationList> ::= <DeclarationList>
     <DeclarationList> ::= <Declaration>;<DeclarationList>
     <Declaration> ::= <Qualifier> <IDs>
Token: Keyword --- Lexeme: int
     <Qualifier> ::= int
Token: Identifier --- Lexeme: i
     <IDs> ::= <Identifier>
Token: Separator --- Lexeme: ,
Token: Identifier --- Lexeme: max
     <IDs> ::= <Identifier>
Token: Separator --- Lexeme: ,
Token: Identifier --- Lexeme: sum
     <IDs> ::= <Identifier>
     <IDsPrime> ::= Epsilon
Token: Separator --- Lexeme: ;
     <Declaration List Prime> ::= Epsilon
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Identifier --- Lexeme: sum
     <Statement> ::= <Assign>
Token: Operator --- Lexeme: =
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Integer --- Lexeme: 0
     <Primary> = <Integer>
     <Term Prime> = Epsilon
     <Expression Prime> = EpsilonToken: Separator --- Lexeme: ;
     <Assign> ::= <Identifier> := <Expression);
Token: Identifier --- Lexeme: i
     <Statement List Prime> ::= <Statement List>
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Identifier --- Lexeme: i
     <Statement> ::= <Assign>
Token: Operator --- Lexeme: =
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Integer --- Lexeme: 1
     <Primary> = <Integer>
     <Term Prime> = Epsilon
     <Expression Prime> = EpsilonToken: Separator --- Lexeme: ;
     <Assign> ::= <Identifier> := <Expression);
Token: Keyword --- Lexeme: get
     <Statement List Prime> ::= <Statement List>
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Keyword --- Lexeme: get
     <Statement> ::= <Scan>
Token: Keyword --- Lexeme: get
Token: Separator --- Lexeme: (
Token: Identifier --- Lexeme: max
     <IDs> ::= <Identifier>
     <IDsPrime> ::= Epsilon
Token: Separator --- Lexeme: )
Token: Separator --- Lexeme: ;
     <Read> ::= read(<Statement List>);
Token: Keyword --- Lexeme: while
     <Statement List Prime> ::= <Statement List>
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Keyword --- Lexeme: while
     <Statement> ::= <While>
Token: Separator --- Lexeme: (
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: i
     <Primary> = <Identifier>
Token: Operator --- Lexeme: <
     <Primary Prime> = Epsilon
     <Term Prime> = Epsilon
     <Expression Prime> = EpsilonToken: Operator --- Lexeme: <
     <Expression> < <Expression>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: max
     <Primary> = <Identifier>
Token: Separator --- Lexeme: )
     <Primary Prime> = Epsilon
     <Term Prime> = Epsilon
     <Expression Prime> = EpsilonToken: Separator --- Lexeme: )
Token: Separator --- Lexeme: {
     <Statement> ::= <Compound>
Token: Separator --- Lexeme: {
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Identifier --- Lexeme: sum
     <Statement> ::= <Assign>
Token: Operator --- Lexeme: =
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: sum
     <Primary> = <Identifier>
Token: Operator --- Lexeme: +
     <Primary Prime> = Epsilon
     <Term Prime> = Epsilon
Token: Operator --- Lexeme: +
     <Expression Prime> = + <Expression>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: i
     <Primary> = <Identifier>
Token: Separator --- Lexeme: ;
     <Primary Prime> = Epsilon
     <Term Prime> = Epsilon
     <Expression Prime> = EpsilonToken: Separator --- Lexeme: ;
     <Assign> ::= <Identifier> := <Expression);
Token: Identifier --- Lexeme: i
     <Statement List Prime> ::= <Statement List>
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Identifier --- Lexeme: i
     <Statement> ::= <Assign>
Token: Operator --- Lexeme: =
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: i
     <Primary> = <Identifier>
Token: Operator --- Lexeme: +
     <Primary Prime> = Epsilon
     <Term Prime> = Epsilon
Token: Operator --- Lexeme: +
     <Expression Prime> = + <Expression>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Integer --- Lexeme: 1
     <Primary> = <Integer>
     <Term Prime> = Epsilon
     <Expression Prime> = EpsilonToken: Separator --- Lexeme: ;
     <Assign> ::= <Identifier> := <Expression);
     <Statement List Prime> ::= Epsilon
Token: Separator --- Lexeme: }
     <Compound> ::= {<Statement List>}
     <While> ::= while(<Condition>) Statement
Token: Keyword --- Lexeme: put
     <Statement List Prime> ::= <Statement List>
     <Statement List> ::= <Statement> <Statement List Prime>
Token: Keyword --- Lexeme: put
     <Statement> ::= <Print>
Token: Separator --- Lexeme: (
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: sum
     <Primary> = <Identifier>
Token: Operator --- Lexeme: +
     <Primary Prime> = Epsilon
     <Term Prime> = Epsilon
Token: Operator --- Lexeme: +
     <Expression Prime> = + <Expression>
    <Term> = <Factor><Term Prime>
     <Factor> = <Primary>
Token: Identifier --- Lexeme: max
     <Primary> = <Identifier>
Token: Separator --- Lexeme: )
     <Primary Prime> = Epsilon
     <Term Prime> = Epsilon
     <Expression Prime> = EpsilonToken: Separator --- Lexeme: )
Token: Separator --- Lexeme: ;
     <Write> ::= put(<Expression>);
