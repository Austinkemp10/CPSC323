#####################################################################
##            CPSC323 Assignment 2 (Syntax Parser)                 ##
##            Team Members:                                        ##
##                          1. Aishwarya Iyer                      ##
##                          2. Abhishek Mhatre                     ##
##                                                                 ##
#####################################################################

import lexer

#Function to terminate the program
def terminate():
    exit()
#Function to get the next lexeme & token from the lexer output table
def nextLexeme(lexer_table,i):
    j = -1
    token = ""
    lexeme = ""
    line_number = ""
    
    while j < len(lexer_table[i]):
        while (True):
            j+=1
            if line_number=="":
                if lexer_table[i][j] =="" or lexer_table[i][j] == "\t":
                    continue
                elif lexer_table[i][j].isdigit():
                    line_number += str(lexer_table[i][j])
            else:
                if lexer_table[i][j] == " " or lexer_table[i][j] == "\t":
                    break
                else:
                    line_number += lexer_table[i][j]
        
        while (True):            
            j += 1
            if token == "":
                if lexer_table[i][j] == " " or lexer_table[i][j] == "\t":
                    continue
                elif lexer_table[i][j].isalpha():
                    token += lexer_table[i][j]
            else:
                if lexer_table[i][j] == " " or lexer_table[i][j] == "\t":
                    break
                else:
                    token += lexer_table[i][j]
                    
        while (True):
            j += 1
            if lexer_table[i][j] == " " or lexer_table[i][j] == "\t":
                continue
            elif lexer_table[i][j] == "\n":
                break
            else:
                lexeme += lexer_table[i][j]
                
        break
     
    return line_number, token, lexeme, i

            

#Main grammar start here
def RAT18S():
    #run lexer
    filename = lexer.main()
    
    syntactic_correct = False
    
    #Read lexer output file generated by lexer.py
    lexer_output_file = open(filename+"_lexer_output" + ".txt", "r")
    lexer_table = lexer_output_file.readlines()
    outputFile = open(filename+"_syntax_output" + ".txt", "w")
    
    #first two lines of the lexer output table are heading
    #therefore i starts from 2
    i=2
    
    while i <(len(lexer_table)-1):
        toke = ""
        lexeme = ""
        line_number = ""
        
        line_number, token, lexeme, i = nextLexeme(lexer_table, i)
        
        #R1. <Rat18S>  ::=   <Opt Function Definitions>   %%  <Opt Declaration List>  <Statement List> 
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        syntactic_correct, i = OptFunctionDefinitions(lexer_table, i, lexeme, token, outputFile)
        
        if (i < len(lexer_table) - 1):
            line_number, token, lexeme, i = nextLexeme(lexer_table, i)
            if (lexeme == "%%"):
                i += 1
                print ("Token: " + token + " --- Lexeme: " + lexeme)
                outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                syntactic_correct, i = OptDeclarationList(lexer_table, i, lexeme, token, outputFile)
                syntactic_correct, i = StatementList(lexer_table, i, lexeme, token, outputFile)
            else:
                print ("[Line Number:" + line_number+"]="+"Syntax Error: Missing %% at the end of <Opt Function Definitions>\n")
                outputFile.write("Syntax Error: Missing %% at the end of <Opt Funtion Definitions>]\n")
                outputFile.write("Line Number: " + line_number)
                print("Program terminated")
                terminate()
#         else:
#             error_string = "[Line Number:" + line_number+"]="+"Syntax Error: Missing %% at the end of <Opt Function Definitions>\n"
#             print (error_string)
#             outputFile.write(error_string)
#             print("Program terminated")
#             terminate()           
        #End of R1
#End of RAT18S

#Function for R2. <Opt Function Definitions> ::= <Function Definitions>     |  <Empty>
def OptFunctionDefinitions(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
#     line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (lexeme == "function"):
#         line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)    
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Opt Function Definitions> ::= <FunctionDefinitions>\n")
        outputFile.write("     <Opt Function Definitions> ::= <FunctionDefinitions>\n")
        syntactic_correct, i = FunctionDefinitions(lexer_table, i, lexeme, token, outputFile)
    
    else:
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Opt Function Definitions> ::= <Empty>\n")
        outputFile.write("     <Opt Function Definitions> ::= <Empty>\n")
        syntactic_correct, i = Empty(lexer_table, i, lexeme, token, outputFile)
    
    return syntactic_correct, i
#End of OptFunctionDefinitions


#Function for R3. <Function Definitions>  ::= <Function> <Function Definitions Prime>   
def FunctionDefinitions(lexler_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    print ("     <Function Definitions> ::= <Function><Function Definitions Prime>\n")
    outputFile.write("     <Function Definitions> ::= <Function><Function Definitions Prime>\n")
    syntactic_correct, i = Function(lexler_table, i, lexeme, token, outputFile)
    syntactic_correct, i = FunctionDefinitionsPrime(lexler_table, i, lexeme, token, outputFile)
    print ("     <Function Definitions> ::= <Function>\n")
    outputFile.write("     <Function Definitions> ::= <Function>\n")

    return syntactic_correct, i
#End of FunctionDefinitions

#Function for R4.<Function Definitions Prime>  ::= <Function Definitions> | Epsilon
def FunctionDefinitionsPrime(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    print ("Token: " + token + " --- Lexeme: " + lexeme)
    outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
    if (lexeme == "%%"):
        print ("     <Function Definitions Prime> ::= Epsilon")
        outputFile.write("     <Function Definitions Prime> ::= Epsilon\n")
        syntactic_correct = True
            
    elif (lexeme == "function"): 
        print ("     <Function Definitions Prime> ::= <Function Definitions>\n")
        outputFile.write("     <Function Definitions Prime> ::= <Function Definitions>\n")
        syntactic_correct, i = FunctionDefinitions(lexer_table, i, lexeme, token, outputFile)
        
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Invalid token.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()
    
    return syntactic_correct, i
#End of FunctionDefinitionsPrime


# Function for R5.<Function> ::= function  <Identifier>  [ <Opt Parameter List> ]  <Opt Declaration List>  <Body>
def Function(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    print ("     <Function> ::= function <Identifier> [ <Opt Parameter List> ] <Opt Declaration List> <Body>\n")
    
    if (lexeme == "function"):
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)

        if (token == "Identifier"):    
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            print ("     <Function> ::= function <Identifier> [ <Opt Parameter List> ] <Opt Declaration List> <Body>\n")
            line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)

            if (lexeme == "["):
                print ("Token: " + token + " --- Lexeme: " + lexeme)
                outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                syntactic_correct, i = OptParameterList(lexer_table, i, lexeme, token, outputFile)    
                line_number, token, lexeme, i = nextLexeme(lexer_table, i)
                    
                if (lexeme == "]"):
                    print ("Token: " + token + " --- Lexeme: " + lexeme)
                    outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)    
                    syntactic_correct, i = OptDeclarationList(lexer_table, i, lexeme, token, outputFile)
                    syntactic_correct, i = Body(lexer_table, i, lexeme, token, outputFile)

                else:
                    error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ']'.\n" 
                    print (error_string)
                    outputFile.write(error_string)
                    print("Program terminated")
                    terminate()
                    
            else:
                error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '['.\n" 
                print (error_string)
                outputFile.write(error_string)
                print("Program terminated")
                terminate()        
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing Identifier.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()
    else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing 'function'.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()

    return syntactic_correct, i
#End of Function()

#Function for R6.<Opt Parameter List> ::=  <Parameter List>    |     <Empty>
def OptParameterList(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (lexeme != "]"):
        i -= 1
        print ("     <Opt Parameter List> ::= <Parameter List>\n")
        outputFile.write("     <Opt Parameter List> ::= <Parameter List>\n")
        syntactic_correct, i = ParameterList(lexer_table, i, lexeme, token, outputFile)        
        
    elif (lexeme == "]"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Opt Parameter List> ::= <Empty>\n")
        outputFile.write("     <Opt Parameter List> ::= <Empty>\n")
        syntactic_correct, i = Empty(lexer_table, i, lexeme, token, outputFile)
        
    return syntactic_correct, i
#End of OptParameterList()

#Function for R7.<Parameter List>  ::=  <Parameter> , <Parameter List Prime>
def ParameterList(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    print ("     <Parameter List> ::= <Parameter> , <Parameter List Prime>\n")
    outputFile.write("     <Parameter List> ::= <Parameter> , <Parameter List Prime>\n")

    syntactic_correct, i = Parameter(lexer_table, i, lexeme, token, outputFile)
    syntactic_correct, i = ParameterListPrime(lexer_table, i, lexeme, token, outputFile)
    
    return syntactic_correct, i
#End of ParameterList()

#Function for R8.<Parameter List Prime>  ::= <Parameter> | Epsilon
def ParameterListPrime(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)

    if (lexeme == ","):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Parameter List Prime> ::= ,<Parameter List>\n")
        outputFile.write("     <Parameter List Prime> ::= ,<Parameter List>\n")
        syntactic_correct, i = ParameterList(lexer_table, i, lexeme, token, outputFile)
    
    else:
        print ("     <Parameter List Prime> ::= Epsilon")
        outputFile.write("     <Parameter List Prime> ::= Epsilon\n")
        syntactic_correct = True
    
    return syntactic_correct, i
#End of ParameterListPrime()

#Function for R9.<Parameter>  ::= <IDs> : <Qualifier>
def Parameter(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    print ("     <Parameter> ::= <IDS> := <Qualifier>\n")
    outputFile.write("     <Parameter> ::= <IDS> := <Qualifier>\n")

    syntactic_correct, i = IDs(lexer_table, i, lexeme, token, outputFile)
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    
    if(lexeme == ":"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        syntactic_correct, i = Qualifier(lexer_table, i, lexeme, token, outputFile) 
    
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing Identifier.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()
       

    return syntactic_correct, i
#End of Parameter()

#Function for R10. <Qualifier> ::= int     |    boolean    |  real 
def Qualifier(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    
    if (lexeme == "int") or (lexeme == "boolean") or (lexeme == "real"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Qualifier> ::= " + lexeme)
        outputFile.write("     <Qualifier> ::= " + lexeme + "\n")
        syntactic_correct = True
    
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing Qualifier.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()   
         
    return syntactic_correct, i
#End of Qualifier()

#Function for R11.<Body>  ::=  {  < Statement List>  }
def Body(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    
    if (lexeme == "{"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        syntactic_correct, i = StatementList(lexer_table, i, lexeme, token, outputFile)
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        if (lexeme == "}"):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            print ("     <Body> ::= {<Statement List>}")
            outputFile.write("     <Body> ::= {<Statement List>}\n")
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '}'.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()
    
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '{'.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()   
    
    return syntactic_correct, i
#End of Body

#Function for R12.<Opt Declaration List> ::= <Declaration List>   |    <Empty>
def OptDeclarationList(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i)
    if (lexeme == "int") or (lexeme == "boolean") or (lexeme == "real"):
        print ("     <OptDeclarationList> ::= <DeclarationList>")
        outputFile.write("     <OptDeclarationList> ::= <DeclarationList>\n")
        i -= 1
        syntactic_correct, i = DeclarationList(lexer_table, i, lexeme, token, outputFile)

    else:
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <OptDeclarationList> ::= Epsilon")
        outputFile.write("     <OptDeclarationList> ::= <Empty>\n")
        syntactic_correct, i = Empty(lexer_table, i, lexeme, token, outputFile)


    return syntactic_correct, i - 1
#End of OptDecalarationList


#Function for R13.<Declaration List> ::= <Declaration> <Declaration List Prime>
def DeclarationList(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    print ("     <DeclarationList> ::= <Declaration>;<DeclarationLlineNumberist>\n")
    outputFile.write("     <DeclarationList> ::= <Declaration>;<DeclarationList>\n")
        
    syntactic_correct, i = Declaration(lexer_table, i, lexeme, token, outputFile)
    syntactic_correct, i = DeclarationListPrime(lexer_table, i, lexeme, token, outputFile)

    return syntactic_correct, i
#End of DeclerationList()


# Function: DeclarationList
#Function for R14.<Declaration List Prime> ::= <Declaration List> ! Epsilon
def DeclarationListPrime(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (lexeme == "real") or (lexeme == "integer") or (lexeme == "boolean"):
        print ("     <Declaration List Prime> ::= ;<Declaration List>\n")
        outputFile.write("     <Declaration List Prime> ::= ;<Declaration List>\n")
        i -= 1
        syntactic_correct, i = DeclarationList(lexer_table, i, lexeme, token, outputFile)

    else:
        print ("     <Declaration List Prime> ::= Epsilon")
        outputFile.write("     <Declaration List Prime> ::= Epsilon\n")
        syntactic_correct = True

    return syntactic_correct, i
#End of DeclerationListPrime()

#Function for R15. <Declaration> ::=   <Qualifier > <IDs>                   
def Declaration(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    print ("     <Declaration> ::= <Qualifier> <IDs>\n")
    outputFile.write("     <Declaration> ::= <Qualifier> <IDs>\n")

    syntactic_correct, i = Qualifier(lexer_table, i, lexeme, token, outputFile)
    syntactic_correct, i = IDs(lexer_table, i, lexeme, token, outputFile)
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (lexeme == ";"):
        print ("Token: " + token + " --- Lexeme: " + lexeme) 
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        return syntactic_correct, i
    
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ';'.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()
#End of Declaration

#Function for R16.<IDs> ::=     <Identifier>    | <Identifier>, <IDs>
def IDs(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False    
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (token == "Identifier"):
        print ("Token: " + token + " --- Lexeme: " + lexeme) 
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <IDs> ::= <Identifier>")
        outputFile.write("     <IDs> ::= <Identifier>\n")
        syntactic_correct, i = IDsPrime(lexer_table, i, lexeme, token, outputFile)
    
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing Identifier.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()  
    
    return syntactic_correct, i
#End of IDs()


# Function: IDs
#Function for R16.<IDs> ::=     <IDs>    | Epsilon
def IDsPrime(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (lexeme == ","):
        print ("     <IDs Prime> ::= ,<IDs>\n")
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        syntactic_correct, i = IDs(lexer_table, i, lexeme, token, outputFile)

    else:
        print ("     <IDsPrime> ::= Epsilon")
        outputFile.write("     <IDsPrime> ::= Epsilon\n")
        syntactic_correct = True
        i -= 1
    
    return syntactic_correct, i
#End of IDsPrime()


#Function for R17.<Statement List> ::=   <Statement> <Statement List Prime>
def StatementList(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    print ("     <Statement List> ::= <Statement> <Statement List Prime>")
    outputFile.write("     <Statement List> ::= <Statement> <Statement List Prime>\n")

    syntactic_correct, i = Statement(lexer_table, i, lexeme, token, outputFile)
    syntactic_correct, i = StatementListPrime(lexer_table, i, lexeme, token, outputFile)
    
    return syntactic_correct, i
#End of SratementList()


#Function for R18.<Statement List Prime> ::=  <Statement List> | Epsilon
def StatementListPrime(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    
    if (lexeme != "}") and (lexeme != "$$"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Statement List Prime> ::= <Statement List>")
        outputFile.write("     <Statement List Prime> ::= <Statement List>\n")
        i -= 1

        syntactic_correct, i = StatementList(lexer_table, i, lexeme, token, outputFile)

    else:
        print ("     <Statement List Prime> ::= Epsilon")
        outputFile.write("     <Statement List Prime> ::= Epsilon\n")
        syntactic_correct = True
        i -= 1
    
    return syntactic_correct, i
#End of StatementListPrime()


#Function for R19. <Statement> ::=   <Compound>  |  <Assign>  |   <If>  |  <Return>   | <Print>   |   <Scan>   |  <While> 
def Statement(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    #Compound
    if(lexeme == "{"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Statement> ::= <Compound>")
        outputFile.write("     <Statement> ::= <Compound>\n")
        syntactic_correct, i = Compound(lexer_table, i, lexeme, token, outputFile)
    #Assign 
    elif (token == "Identifier"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Statement> ::= <Assign>")
        outputFile.write("     <Statement> ::= <Assign>\n")
        syntactic_correct, i = Assign(lexer_table, i, lexeme, token, outputFile)
    #If
    elif (lexeme == "if"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Statement> ::= <If>")
        outputFile.write("     <Statement> ::= <If>\n")
        syntactic_correct, i = If(lexer_table, i, lexeme, token, outputFile)
    #Return
    elif (lexeme == "return"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Statement> ::= <Return>")
        outputFile.write("     <Statement> ::= <Return>\n")
        syntactic_correct, i = Return(lexer_table, i, lexeme, token, outputFile)
    #Print
    elif (lexeme == "put"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Statement> ::= <Print>")
        outputFile.write("     <Statement> ::= <Print>\n")
        syntactic_correct, i = Print(lexer_table, i, lexeme, token, outputFile)
    #Scan
    elif (lexeme == "get"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Statement> ::= <Scan>")
        outputFile.write("     <Statement> ::= <Scan>\n")
        syntactic_correct, i = Scan(lexer_table, i, lexeme, token, outputFile)
    #While
    elif (lexeme == "while"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Statement> ::= <While>")
        outputFile.write("     <Statement> ::= <While>\n")
        syntactic_correct, i = While(lexer_table, i, lexeme, token, outputFile)
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Invalid Statement.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()  

    return syntactic_correct, i
#End of Statement()

#Function for R20.<Compound> ::=   {  <Statement List>  } 
def Compound(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    if (lexeme == "{"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        syntactic_correct, i = StatementList(lexer_table, i, lexeme, token, outputFile)
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        if (lexeme == "}"):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            print ("     <Compound> ::= {<Statement List>}")
            outputFile.write("     <Compound> ::= {<Statement List>}\n")
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '}'.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()      
    
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '{'.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()  
    
    return syntactic_correct, i
#End of Compound()

#Function for R21. <Assign> ::=     <Identifier> = <Expression> ;
def Assign(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    if (token == "Identifier"):
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        
        if (lexeme == "="):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
            
            
            line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
            
            if (lexeme == ";"):
                print ("Token: " + token + " --- Lexeme: " + lexeme)
                outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                print ("     <Assign> ::= <Identifier> := <Expression);")
                outputFile.write("     <Assign> ::= <Identifier> := <Expression);\n")
            
            else:
                error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ';'.\n" 
                print (error_string)
                outputFile.write(error_string)
                print("Program terminated")
                terminate()  
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '='.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()  
    
    return syntactic_correct, i
#End of Assign()

#Function for R22. <If> ::=     if  ( <Condition>  ) <Statement>   endif    |   
#                          if  ( <Condition>  ) <Statement>   else  <Statement>  endif   
def If(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    if (lexeme == "if"):
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        
        # Generate Assembly
        address = Instr_address - 1
        
        if (lexeme == "("):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            syntactic_correct, i = Condition(lexer_table, i, lexeme, token, outputFile)
            line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
            if (lexeme == ")"):
                print ("Token: " + token + " --- Lexeme: " + lexeme)
                outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                syntactic_correct, i = Statement(lexer_table, i, lexeme, token, outputFile)
                syntactic_correct, i = Else(lexer_table, i, lexeme, token, outputFile)
                
                # Generate Assembly
                back_patch(Instr_address)
                
            else:
                error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ')'.\n" 
                print (error_string)
                outputFile.write(error_string)
                print("Program terminated")
                terminate()  
                 
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '('.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()  
    
    return syntactic_correct, i
#End of If()

#Function for Else part of If()
def Else(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
                
    if (lexeme == "else"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        syntactic_correct, i = Statement(lexer_table, i, lexeme, token, outputFile)
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        
        if (lexeme == "endif"):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            print ("     <If> ::= (<Condition>) <Statement> else <Statement> endif")
            outputFile.write("     <If> ::= (<Condition>) <Statement> else <Statement> endif\n")
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing endif.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()  
    
    elif (lexeme == "endif"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <If> ::= (<Condition>) <Statement> endif")
        outputFile.write("     <If> ::= (<Condition>) <Statement> endif\n")
    
    else:    
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing endif or else.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()     
    
    return syntactic_correct, i
#End of Else()

#Function for R23. <Return> ::=  return ; |  return <Expression> ;
def Return(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    if (lexeme == "return"):
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        
        if (lexeme == ";"):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            print ("     <Return> ::= return;")
            outputFile.write("     <Return> ::= return;\n")
        
        else:
            i -= 1
            syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
            line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)

            if (lexeme == ";"):
                print ("Token: " + token + " --- Lexeme: " + lexeme)
                outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                print ("     <Return> ::= return <Expression>;")
                outputFile.write("     <Return> ::= return <Expression>;\n")
            
            else:
                error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ';'.\n" 
                print (error_string)
                outputFile.write(error_string)
                print("Program terminated")
                terminate()    
                
    return syntactic_correct, i
#End of Return()

#Function for R24. <Print> ::=    put ( <Expression>);
def Print(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    if (lexeme == "put"):
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        if (lexeme == "("):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            
            syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
            
            
            line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
            
            if (lexeme == ")"):
                print ("Token: " + token + " --- Lexeme: " + lexeme)
                outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
                
                if (lexeme == ";"):
                    print ("Token: " + token + " --- Lexeme: " + lexeme)
                    outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                    print ("     <Write> ::= put(<Expression>);")
                    outputFile.write("     <Write> ::= put(<Expression>);\n")
                
                else:
                    error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ';'.\n" 
                    print (error_string)
                    outputFile.write(error_string)
                    print("Program terminated")
                    terminate()  
            
            else:
                error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ')'.\n" 
                print (error_string)
                outputFile.write(error_string)
                print("Program terminated")
                terminate()   
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '('.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing 'put'.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()    
    
    return syntactic_correct, i
#End of Print()


#Function for R25.<Scan> ::=    get ( <IDs> );
def Scan(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    if (lexeme == "get"):
        
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        
        if (lexeme == "("):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            
            syntactic_correct, i = IDs(lexer_table, i, lexeme, token, outputFile)
            
            
            line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
            
            if (lexeme == ")"):
                print ("Token: " + token + " --- Lexeme: " + lexeme)
                outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
                
                if (lexeme == ";"):
                    print ("Token: " + token + " --- Lexeme: " + lexeme)
                    outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                    print ("     <Read> ::= read(<Statement List>);")
                    outputFile.write("     <Read> ::= read(<Statement List>);\n")
                
                else:
                    error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ';'.\n" 
                    print (error_string)
                    outputFile.write(error_string)
                    print("Program terminated")
                    terminate()      
            
            else:
                error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ')'.\n" 
                print (error_string)
                outputFile.write(error_string)
                print("Program terminated")
                terminate()     
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '('.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()  
    
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing 'get'.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()  
        
    return syntactic_correct, i
#End of Scan()


#Function for R26.<While> ::=  while ( <Condition>  )  <Statement> 
def While(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    if (lexeme == "while"):
      
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        
        if (lexeme == "("):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            syntactic_correct, i = Condition(lexer_table, i, lexeme, token, outputFile)
            line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
            if (lexeme == ")"):
                print ("Token: " + token + " --- Lexeme: " + lexeme)
                outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
                syntactic_correct, i = Statement(lexer_table, i, lexeme, token, outputFile)
                print ("     <While> ::= while(<Condition>) Statement")
                outputFile.write("     <While> ::= while(<Condition>) Statement\n")
                
            else:
                error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ')'.\n" 
                print (error_string)
                outputFile.write(error_string)
                print("Program terminated")
                terminate()    
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing '('.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()  
    
    return syntactic_correct, i
#End of While

#Function for R27.<Condition> ::=     <Expression>  <Relop>   <Expression>
def Condition(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
    syntactic_correct, i = Relop(lexer_table, i, lexeme, token, outputFile)
    syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
    
    return syntactic_correct, i
#End of Condition

#Function for R28.<Relop> ::=        ==   |   ^=    |   >     |   <    |   =>    |   =<          
def Relop(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1) 
    
    if (lexeme == "=="):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Expression> = <Expression>")
        outputFile.write("     <Expression> = <Expression>\n")
            
    elif (lexeme == "^="):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Expression> ^= <Expression>")
        outputFile.write("     <Expression> => <Expression>\n")
            
    elif (lexeme == ">"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Expression> > <Expression>")
        outputFile.write("     <Expression> > <Expression>\n")
            
    elif (lexeme == "<"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Expression> < <Expression>")
        outputFile.write("     <Expression> < <Expression>\n")  
    
    elif (lexeme == "<="):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Expression> <= <Expression>")
        outputFile.write("     <Expression> <= <Expression>\n")
            
    elif (lexeme == "=>"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Expression> => <Expression>")
        outputFile.write("     <Expression> <= <Expression>\n")
        
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Invalid Operator" +lexeme+".\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()  
    
    return syntactic_correct, i
#End of Relop

#Function for R29. <Expression> := <Term> <Expression Prime>
def Expression(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    syntactic_correct, i = Term(lexer_table, i, lexeme, token, outputFile)
    syntactic_correct, i = ExpressionPrime(lexer_table, i, lexeme, token, outputFile)

    return syntactic_correct, i
#End of Expression

#Function for R30. <Expression Prime>:= + <Term> <Expression Prime>| - <Term> <Expression Prime> | <Term> | Epsilon
def ExpressionPrime(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (lexeme == "+"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Expression Prime> = + <Expression>")
        outputFile.write("     <Expression Prime> = + <Expression>\n")
        
        syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
        
    elif (lexeme == "-"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Expression Prime> = - <Expression>")
        outputFile.write("     <Expression Prime> = - <Expression>\n")
        
        syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
        
    else:
        i -= 1
        print ("     <Expression Prime> = Epsilon")
        outputFile.write("     <Expression Prime> = Epsilon")

    return syntactic_correct, i
#End of ExpressionPrime()

#Function fir R31. <Term>    ::=  <Factor> <Term Prime>
def Term(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    print ("     <Term> = <Factor><Term Prime>")
    outputFile.write("    <Term> = <Factor><Term Prime>\n")
    syntactic_correct, i = Factor(lexer_table, i, lexeme, token, outputFile)
    syntactic_correct, i = TermPrime(lexer_table, i, lexeme, token, outputFile)
    
    return syntactic_correct, i
#End of Term()

#Function for R32. <Term Prime> := *<Factor><Term Prime> |/<Factor> <Term Prime>| <Factor> | Epsilon
def TermPrime(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (lexeme == "*"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Term Prime> = * <Factor><Term>\n")
        outputFile.write("     <Term Prime> = * <Factor><Term>\n")
        
        syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
        
      
    elif (lexeme == "/"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Term Prime> = / <Factor><Term>\n")
        outputFile.write("     <Term Prime> = / <Factor><Term>\n")
        
        syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
        
     
    else:
        i -= 1
        print ("     <Term Prime> = Epsilon")
        outputFile.write("     <Term Prime> = Epsilon\n")

    return syntactic_correct, i
#End of TermPrime()

#Function for R33. <Factor> ::=      -  <Primary>    |    <Primary>
def Factor(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (lexeme == "-"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Factor> = - <Primary>")
        outputFile.write("     <Factor> = - <Primary>\n")
    
    else:
        i -= 1
        print ("     <Factor> = <Primary>")
        outputFile.write("     <Factor> = <Primary>\n")
    
    syntactic_correct, i = Primary(lexer_table, i, lexeme, token, outputFile)
    
    return syntactic_correct, i
#End of Factor()


#Function for R34.<Primary> ::=     <Identifier>  |  <Integer>  |   <Identifier>  ( <IDs> )   |   ( <Expression> )   |  
#                                     <Real>  |   true   |  false
def Primary(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    if (token == "Identifier"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Primary> = <Identifier>")
        outputFile.write("     <Primary> = <Identifier>\n")
      
        syntactic_correct, i = PrimaryPrime(lexer_table, i, lexeme, token, outputFile)
    
    elif (token == "Integer"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Primary> = <Integer>\n")
        outputFile.write("     <Primary> = <Integer>\n")
      
    elif (token == "Real"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Primary> = <Real>")
        outputFile.write("     <Primary> = <Real>\n")
    
    elif (lexeme == "true"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Primary> = true")
        outputFile.write("     <Primary> = true\n")
   
    
    elif (lexeme == "false"):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        print ("     <Primary> = false")
        outputFile.write("     <Primary> = false\n")

    
    elif (lexeme == "("):
        print ("Token: " + token + " --- Lexeme: " + lexeme)
        outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
        syntactic_correct, i = Expression(lexer_table, i, lexeme, token, outputFile)
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        
        if (lexeme == ")"):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            print ("     <Primary> = (<Expression>)")
            outputFile.write("     <Primary> = (<Expression>)\n")
        
        else:
            error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Missing ')'.\n" 
            print (error_string)
            outputFile.write(error_string)
            print("Program terminated")
            terminate()  
    
    else:
        error_string ="[Line Number:" + line_number+"]="+"Syntax Error: Invalid token.\n" 
        print (error_string)
        outputFile.write(error_string)
        print("Program terminated")
        terminate()  
        
    return syntactic_correct, i
#End of Primary()                        


def PrimaryPrime(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
    line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    print ("Token: " + token + " --- Lexeme: " + lexeme)
    outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
    if (lexeme == "["):
        syntactic_correct, i = IDs(lexer_table, i, lexeme, token, outputFile)
        line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
        
        if (lexeme == "]"):
            print ("Token: " + token + " --- Lexeme: " + lexeme)
            outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
            print ("     <Primary Prime> = [<IDs>]")
            outputFile.write("     <Primary Prime> = [<IDs>])\n")
            
    else:
        i -= 1
        print ("     <Primary Prime> = Epsilon")
        outputFile.write("     <Primary Prime> = Epsilon\n")
                
    return syntactic_correct, i    
#End of PrimaryPrime

#Function for R35.<Empty>   ::= Epsilon
def Empty(lexer_table, i, lexeme, token, outputFile):
    syntactic_correct = False
#     line_number, token, lexeme, i = nextLexeme(lexer_table, i + 1)
    print ("Token: " + token + " --- Lexeme: " + lexeme)
    outputFile.write("Token: " + token + " --- Lexeme: " + lexeme + '\n')
    print ("     <Empty> ::= Epsilon")
    outputFile.write("     <Empty> ::= Epsilon\n")
    syntactic_correct = True
            
    return syntactic_correct, i
#End of Empty    


def main():
    RAT18S()
    

if __name__=="__main__":
    main()